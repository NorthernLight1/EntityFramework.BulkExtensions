using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Core.Mapping;
using System.Data.Entity.Core.Metadata.Edm;
using System.Linq;

namespace N.EntityFramework.Extensions
{
    public class TableMapping
    {
        public EntitySetMapping Mapping { get; set; }
        public EntitySet EntitySet { get; set; }
        public EntityType EntityType { get; set; }
        public Type ClrType { get; set; }
        public IEnumerable<EntityType> EntityTypes { get; }
        public List<ScalarPropertyMapping> Columns { get; set; }
        public List<ConditionPropertyMapping> Conditions { get; set; }
        public string Schema { get; }
        public string TableName { get; }
        public string FullQualifedTableName
        {
            get { return string.Format("[{0}].[{1}]", this.Schema, this.TableName); }
        }

        public bool HasIdentity => this.Columns.Any(o => o.Column.IsStoreGeneratedIdentity);

        public TableMapping(EntitySet entitySet, EntityType entityType, Type clrType, EntitySetMapping mapping,
            List<ScalarPropertyMapping> columns, List<ConditionPropertyMapping> conditions)
        {
            var storeEntitySet = mapping.EntityTypeMappings.First(o => o.EntityType != null && o.EntityType.Name == entityType.Name).Fragments.Single().StoreEntitySet;

            ClrType = clrType;
            EntitySet = entitySet;
            EntityType = entityType;
            EntityTypes = GetEntityTypes().Reverse();
            Mapping = mapping;
            Columns = columns;
            Conditions = conditions;
            Schema = (string)storeEntitySet.MetadataProperties["Schema"].Value ?? storeEntitySet.Schema;
            TableName = (string)storeEntitySet.MetadataProperties["Table"].Value ?? storeEntitySet.Name;
        }

        public IEnumerable<string> GetAutoGeneratedColumns(bool storeGeneratedIdentity = true)
        {
            return this.Columns.Where(o => o.Column.IsStoreGeneratedComputed || (storeGeneratedIdentity && o.Column.IsStoreGeneratedIdentity)).Select(o => o.Column.Name);
        }
        public IEnumerable<string> GetColumns(bool includeIdentity = false, bool includeComputed = false)
        {
            var columns = new List<string>();
            columns.AddRange(this.Columns.Where(o => (!o.Column.IsStoreGeneratedComputed || includeComputed) && (includeIdentity || !o.Column.IsStoreGeneratedIdentity)).Select(o => o.Column.Name));
            columns.AddRange(this.Conditions.Select(o => o.Column.Name));
            return columns;
        }
        public IEnumerable<string> GetQualifiedColumnNames(IEnumerable<string> columnNames)
        {
            string format = "[{0}].[{1}]";
            var columns = new List<string>();
            columns.AddRange(this.Columns.Where(o => columnNames.Contains(o.Column.Name))
                .Select(o => string.Format(format, FindTableName(o.Column.DeclaringType as EntityType), o.Column.Name)));
            columns.AddRange(this.Conditions.Where(o => columnNames.Contains(o.Column.Name))
                .Select(o => string.Format(format, FindTableName(o.Column.DeclaringType as EntityType), o.Column.Name)));
            return columns;
        }
        public IEnumerable<string> GetPrimaryKeyColumns() =>
            EntitySet.ElementType.KeyMembers.Select(o => Columns.Single(c => c.Property.Name == o.Name).Column.Name);
        public IEnumerable<string> GetTableNames()
        {
            foreach (var entityType in EntityTypes)
            {
                var storeEntitySet = Mapping.EntityTypeMappings.First(t => (t.EntityType != null && t.EntityType.Name == entityType.Name)
                        || t.IsOfEntityTypes.Any(o => o.Name == entityType.Name)).Fragments.Single().StoreEntitySet;
                yield return FindTableName(storeEntitySet);
            }
        }
        private string FindTableName(EntitySet storeEntitySet)
        {
            return (string)storeEntitySet.MetadataProperties["Table"].Value ?? storeEntitySet.Name;
        }
        private string FindTableName(EntityType entityType)
        {
            var storeEntitySet = Mapping.EntityTypeMappings.First(t => (t.EntityType != null && t.EntityType.Name == entityType.Name)
                        || t.IsOfEntityTypes.Any(o => o.Name == entityType.Name)).Fragments.Single().StoreEntitySet;
            return FindTableName(storeEntitySet);
        }
        private IEnumerable<EntityType> GetEntityTypes()
        {
            EntityType entityType = EntityType;
            do
            {
                yield return entityType;
                entityType = entityType.BaseType as EntityType;
            } while (entityType != null);
        }
    }
}